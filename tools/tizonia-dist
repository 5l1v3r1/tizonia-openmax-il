#!/bin/bash 
#
# Copyright (C) 2011-2015 Aratelia Limited - Juan A. Rubio
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# Script to package all the Tizonia sub-projects and create Debian packages
#

# Globals
TIZONIA_DIR="$HOME/work/tizonia" # Default value for Tizonia repo's directory
DEBIAN_DIR="$HOME/work/debian" # Default value for the debian packaging directory
TEMP_DIR="$HOME/temp" # Default value for the debian packaging directory

# Constants
readonly MYDEBFULLNAME="Juan A. Rubio"
readonly MYDEBEMAIL="juan.rubio@aratelia.com"

readonly E_BADARGS=85
readonly E_NOFILE=86
readonly E_BAD_CLONE=87
readonly CWD=$(pwd)

readonly RED=1
readonly GRN=2
readonly YEL=3
readonly BLU=4
readonly MAG=5
readonly CYA=6
readonly WHI=7

declare -ar TIZ_TIZONIA_DEPS=( \
    build-essential \
    autoconf \
    autoconf-archive \
    automake \
    autotools-dev \
    libtool \
    libmad0-dev \
    liblog4c-dev \
    libasound2-dev \
    libdbus-1-dev \
    libdbus-c++-dev \
    libsqlite3-dev \
    libboost-all-dev \
    uuid-dev \
    libsdl1.2-dev \
    libvpx-dev \
    libmp3lame-dev \
    libfaad-dev \
    libev-dev \
    libtag1-dev \
    libfishsound-dev \
    libmediainfo-dev \
    libcurl3-dev \
    libpulse-dev \
    libmpg123-dev \
    libvorbis-dev \
    libopus-dev \
    libopusfile-dev \
    libogg-dev \
    libflac-dev \
    liboggz2-dev \
    libsndfile1-dev \
    curl \
    check \
    wget \
    sqlite3 \
    dbus-x11 \
)

declare -ar TIZ_DEBIAN_PKGS=( \
    dpkg-dev \
    dh-make \
    debhelper \
    devscripts \
    pbuilder \
    fakeroot \
    dh-autoreconf \
    python-all-dev \
    python-stdeb \
)

declare -Ar TIZ_PKG_DIRS=( \
    [tizilheaders]="include" \
    [tizgmusicproxy]="gmusic/gmusicproxy" \
    [tizgmusic]="gmusic/libtizgmusic" \
    [tizplatform]="libtizplatform" \
    [tizrmd]="rm/tizrmd" \
    [tizrmproxy]="rm/libtizrmproxy" \
    [tizcore]="libtizcore" \
    [tizonia]="libtizonia" \
)

readonly TIZ_PKGS=(${!TIZ_PKG_DIRS[@]})
readonly TIZ_PKGS_ORDERED=( \
    tizilheaders \
    tizgmusicproxy \
    tizgmusic \
    tizplatform \
    tizrmd \
    tizrmproxy \
    tizcore \
    tizonia \
)

readonly TIZ_PYTHON_PKGS=( \
    tizgmusicproxy \
)

# &> /dev/null
readonly TIZ_C_CPP_PKG_DIST_CMD="autoreconf -ifs &> /dev/null && ./configure && make dist && cp *.tar.gz \"$DEBIAN_DIR\""
readonly TIZ_PYTHON_PKG_DIST_CMD="python setup.py sdist && cp dist/*.tar.gz \"$DEBIAN_DIR\""

declare -Ar TIZ_PKG_DIST_CMD=( \
    [tizilheaders]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizgmusicproxy]="$TIZ_PYTHON_PKG_DIST_CMD" \
    [tizgmusic]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizplatform]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizrmd]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizrmproxy]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizcore]="$TIZ_C_CPP_PKG_DIST_CMD" \
    [tizonia]="$TIZ_C_CPP_PKG_DIST_CMD" \
)

readonly TIZ_PKG_DH_MAKE_I_CMD="dh_make -i --createorig --yes"
readonly TIZ_PKG_DH_MAKE_C_CMD="dh_make -c lgpl3 -l --createorig --yes"
readonly TIZ_PKG_PY2DSC_CMD="py2dsc --dist-dir=."

declare -Ar TIZ_PKG_DH_MAKE_CMD=( \
    [tizilheaders]="$TIZ_PKG_DH_MAKE_I_CMD" \
    [tizgmusicproxy]="$TIZ_PYTHON_PKG_DIST_CMD" \
    [tizgmusic]="$TIZ_PKG_DH_MAKE_C_CMD" \
    [tizplatform]="$TIZ_PKG_DH_MAKE_C_CMD" \
    [tizrmd]="$TIZ_PKG_DH_MAKE_C_CMD" \
    [tizrmproxy]="$TIZ_PKG_DH_MAKE_C_CMD" \
    [tizcore]="$TIZ_PKG_DH_MAKE_C_CMD" \
    [tizonia]="$TIZ_PKG_DH_MAKE_C_CMD" \
)

##################################################################
# Usage details
#
# Globals
#   None
# Arguments:
#   None
# Returns:
#   None
##################################################################

function usage {
    pretty_print "$BLU" "tizonia-remote 0.1.0. Copyright (C) 2015 Juan A. Rubio"
    pretty_print "$BLU" "This software is part of Tizonia <http://tizonia.org>"

    echo
    pretty_print "$BLU" "LGPLv3: GNU Lesser GPL version 3 <http://gnu.org/licenses/lgpl.html>"
    pretty_print "$BLU" "This is free software: you are free to change and redistribute it."
    pretty_print "$BLU" "There is NO WARRANTY, to the extent permitted by law."

    echo
    pretty_print "$GRN" "Usage : $(basename $0) [-a] [-n] [-p] [-r]"
    pretty_print "$GRN" "       -a            : Create and install all deb packages."
    pretty_print "$GRN" "       -n            : Create and install all deb packages, starting from the rist that is not installed yet."
    pretty_print "$GRN" "       -p            : Pre-requisites. Install both Tizonia's and Debian's dependencies."
    pretty_print "$GRN" "       -r            : Uninstall (purge) all currently install Tizonia packages."
} >&2

##################################################################
# Make sure pre-requisites are taken care of
#
# Globals
#   None
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_prereqs {

    # Install tizonia's binary dependencies
    for pkg in "${TIZ_TIZONIA_DEPS[@]}"; do
        local result=$(dpkg-query -W -f='${Status} ${Version}\n' "$pkg" 2> /dev/null | cut -d ' ' -f3)
        if [[ "$result" == "not-installed" ]]; then
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        elif [[ "$result" == "" ]]; then
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        elif [[ "$result" == "installed" ]]; then
            pretty_print "$GRN" "[$pkg] : $result."
        else
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        fi
    done

    # Install debian dependencies
    for pkg in "${TIZ_DEBIAN_PKGS[@]}"; do
        local result=$(dpkg-query -W -f='${Status} ${Version}\n' "$pkg" 2> /dev/null | cut -d ' ' -f3)
        if [[ "$result" == "not-installed" ]]; then
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        elif [[ "$result" == "" ]]; then
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        elif [[ "$result" == "installed" ]]; then
            pretty_print "$GRN" "[$pkg] : $result."
        else
            pretty_print "$BLU" "[$pkg] : installing."
            sudo apt-get install -q -y "$pkg" #> /dev/null
            pretty_print "$GRN" "[$pkg] : installed."
        fi
    done

    # Install source dependencies : currently gmusicapi only
    python -c "import gmusicapi"
    if [[ "$?" -ne 0 ]]; then
        local GMUSICAPI_DIR=gmusicapi
        if [[ -d "$TEMP_DIR"/gmusicapi ]]; then
            sudo rm -rf "$TEMP_DIR"/gmusicapi
        fi

        #echo "Installing pip and an older version of the gmusicapi python module..."
        #     wget https://bootstrap.pypa.io/get-pip.py \
        #         && sudo python get-pip.py \
        #         && sudo pip install gmusicapi --upgrade

        cd "$TEMP_DIR" \
            && git clone https://github.com/simon-weber/Unofficial-Google-Music-API gmusicapi \
            && cd gmusicapi \
            && sudo python setup.py install
    fi

}

##################################################################
# Simple function to check if a string exists in an array
#
# Globals
#   none
# Arguments:
#   The search string is the first argument
#   The array is the second argument
# Returns:
#   0 if success, 1 on error
##################################################################
function exists_in_array {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

##################################################################
# Simple function to print a debug/error message with some extra info
#
# Globals
#   TIZONIA_DIR
# Arguments:
#   None
# Returns:
#   None
##################################################################
function print_err {
  pretty_print "$RED" "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

##################################################################
# Simple function to print a debug/error message with some extra info
#
# Globals
#   TIZONIA_DIR
# Arguments:
#   None
# Returns:
#   None
##################################################################
function log_on_error {
    local exit_status="$1"
    local msg="$2"
    if [[ "$exit_status" -ne 0 ]]; then
        pretty_print "$RED" "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $2"
    fi
}

##################################################################
# Simple function to go to a particular directory
#
# Globals
#   TIZONIA_DIR
# Arguments:
#   None
# Returns:
#   None
##################################################################
function cd_to_dir {
    local pkg_dir="$1"
    echo "package dir: $pkg_dir"
    cd "$pkg_dir"
}

##################################################################
# Simple function to produce a string of "dashes" of a
# pre-determined size
#
# Globals
#   TIZONIA_DIR
# Arguments:
#   The length of the message
# Returns:
#   None
##################################################################
function print_dashes {
    local LEN=$1
    local CHAR='-'
    while (( $# > 0 ))
    do
        case $1 in
            [0-9]*) LEN=$1;;
            -c) shift
                CHAR=$1;;
            *) usagexit;;
        esac
        shift
    done

    if (( LEN > 4096 ))
    then
        echo "too large" >&2
        exit 3
    fi

    # build the string to the exact length
    DASHES=""
    for ((i=0; i<LEN; i++))
    do
        DASHES="${DASHES}${CHAR}"
    done
    echo "$DASHES"
}

##################################################################
# Simple function to print with color
#
# Globals
#
# Arguments:
#
# Returns:
#   None
##################################################################
function pretty_print {
    echo "$(tput setaf $1)$2$(tput sgr 0)" 1>&2
}

##################################################################
# Simple function to print a banner
#
# Globals
#
# Arguments:
#
# Returns:
#   None
##################################################################
function print_banner {
    local msg="$1"
    local color="$2"
    local msg_sz=${#msg}
    local dashes=$(print_dashes "$msg_sz")
    if [[ "$color" == "" ]]; then
        color="$RED"
    fi
    echo
    pretty_print "$color" "$dashes"
    pretty_print "$color" "$msg"
    pretty_print "$color" "$dashes"
}

##################################################################
# Function to create distribution tar files.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_tar_file {
    local pkg="$1"
    local pkg_dir="$2"
    local exit_status=1
    local err_msg='Unknown error'

    print_banner "Creating distribution tar file for: $pkg" "$GRN"
    cd_to_dir "$pkg_dir"

    hg purge . > /dev/null && rm -rf "$DEBIAN_DIR/$pkg" && mkdir -p "$DEBIAN_DIR/$pkg"
    exit_status=$?
    if [[ "$exit_status" -eq 0 ]] ; then
        err_msg="[$pkg] : Error creating the tar file."
        eval "${TIZ_PKG_DIST_CMD[$pkg]}" \
            && mv "$DEBIAN_DIR"/*.gz "$DEBIAN_DIR/$pkg"
        exit_status=$?
    fi

    log_on_error "$exit_status" "$err_msg"
    return "$exit_status"
}

##################################################################
# Function to create a debian package from a normal C/C++ source
# package.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_deb_file {
    local pkg="$1"
    local pkg_dir="$2"
    local pkg_ver=0
    local exit_status=1
    local err_msg='Unknown error'

    print_banner "Creating debian package for: $1" "$YEL"
    cd_to_dir "$pkg_dir"
    pkg_ver=$(ls *.gz | cut -d'-' -f2 | cut -d'.' -f1-3)

    tar zxvf "$pkg-$pkg_ver".tar.gz && cd "$pkg-$pkg_ver"
    exit_status=$?
    if [[ "$exit_status" -eq 0 ]] ; then
        err_msg="[$pkg] : Error while running dh_make."
        eval "${TIZ_PKG_DH_MAKE_CMD[$pkg]}"
        exit_status=0
    fi

    if [[ "$exit_status" -eq 0 ]] ; then
        err_msg="[$pkg] : Error while running dpkg-buildpackage."
        dpkg-buildpackage -us -uc -rfakeroot
        exit_status=$?
    fi

    log_on_error "$exit_status" "$err_msg"
    return "$exit_status"
}

##################################################################
# Function to create a debian package from a python source package.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_python_deb_file {
    local pkg="$1"
    local pkg_dir="$2"
    local pkg_ver=0
    local exit_status=1
    local err_msg='Unknown error'

    print_banner "Creating debian package for: $1" "$YEL"
    cd_to_dir "$pkg_dir"

    pkg_ver=$(ls *.gz | cut -d'-' -f2 | cut -d'.' -f1-3)

    err_msg="[$pkg] : Error while running py2dsc."
    py2dsc --dist-dir='.' "$pkg-$pkg_ver".tar.gz && cd "$pkg-$pkg_ver"
    exit_status=$?

    if [[ "$exit_status" -eq 0 ]] ; then
        err_msg="[$pkg] : Error while running debuild."
        debuild -i -us -uc -b
        exit_status=$?
    fi

    log_on_error "$exit_status" "$err_msg"
    return "$exit_status"
}

##################################################################
# Function to install debian packages
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_install_deb_file {
    local pkg="$1"
    local pkg_dir="$2"
    local pkg_ver=0
    local exit_status=1
    local err_msg='Unknown error'

    print_banner "Installing debian package: $1" "$MAG"
    cd_to_dir "$pkg_dir"

    pkg_ver=$(ls *.gz | cut -d'-' -f2 | cut -d'.' -f1-3)

    err_msg="[$pkg] : Error while installing the package."
    local result=$(dpkg-query -W -f='${Status} ${Version}\n' "$pkg" 2> /dev/null | cut -d ' ' -f3)
    if [[ "$result" == "installed" ]]; then
        pretty_print "$BLU" "[$pkg] : uninstalling."
        sudo dpkg --purge "$pkg"
        pretty_print "$GRN" "[$pkg] : uninstalled."
    fi

    for deb in *.deb
    do
        err_msg="[$pkg] : Error while installing the package."
        pretty_print "$BLU" "[$deb] : installing."
        sudo dpkg -i "$deb"
        exit_status=$?
        if [[ "$exit_status" -eq 0 ]] ; then
            pretty_print "$GRN" "[$deb] : installed."
        else
            break
        fi
    done

    log_on_error "$exit_status" "$err_msg"
    return "$exit_status"
}

##################################################################
# Function to create tar archives of all sub-projects.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_all_tars {
    local exit_status=0
    for pkg in "${TIZ_PKGS_ORDERED[@]}"; do
        local pkg_dir="$TIZONIA_DIR/${TIZ_PKG_DIRS[$pkg]}"
        do_tar_file "$pkg" "$pkg_dir"
        exit_status=$?
        if [[ "$exit_status" -ne 0 ]] ; then
            break
        fi
    done
    return "$exit_status"
}

##################################################################
# Function to create deb packages of all sub-projects.
# Debs are also installed.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_all_debs {
    local exit_status=0
    for pkg in "${TIZ_PKGS_ORDERED[@]}"; do
        local pkg_deb_dir="$DEBIAN_DIR/$pkg"

        exists_in_array "$pkg" "${TIZ_PYTHON_PKGS[@]}"
        if [[ $? -eq 0 ]]; then
            do_python_deb_file "$pkg" "$pkg_deb_dir"
            exit_status=$?
        else
            do_deb_file "$pkg" "$pkg_deb_dir"
            exit_status=$?
        fi

        if [[ "$exit_status" -ne 0 ]] ; then
            break
        fi

        do_install_deb_file "$pkg" "$pkg_deb_dir"
        exit_status=$?
        if [[ "$exit_status" -ne 0 ]] ; then
            break
        fi
    done
    return "$exit_status"
}

##################################################################
# Function to create tar archives and deb packages of all
# sub-projects.Debs are also installed.
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_all_tars_and_debs {
    local exit_status=0

    # Print platform info
    pretty_print "$BLU" "hostname = $(hostname)"
    pretty_print "$BLU" "OS rel   = $(cat /etc/os-release | grep PRETTY | cut -d'=' -f2 | cut -d\" -f2)"
    pretty_print "$BLU" "uname -m = $(uname -m)"
    pretty_print "$BLU" "uname -r = $(uname -r)"
    pretty_print "$BLU" "uname -s = $(uname -s)"
    pretty_print "$BLU" "uname -v = $(uname -v)"

    # Create directories
    if [[ -d "$DEBIAN_DIR" ]]; then
        echo "Deleting an old debian directory: $DEBIAN_DIR"
        rm -rf "$DEBIAN_DIR"
    fi

    if [[ ! -d "$DEBIAN_DIR" ]]; then
        echo "Creating the debian directory: $DEBIAN_DIR"
        mkdir -p "$DEBIAN_DIR"
    fi

    if [[ ! -d "$TEMP_DIR" ]]; then
        echo "Creating the temp directory: $TEMP_DIR"
        mkdir -p "$TEMP_DIR"
    fi

    do_all_tars
    exit_status=$?

    if [[ "$exit_status" -eq 0 ]] ; then
        do_all_debs
        exit_status=$?
    fi
    return "$exit_status"
}

##################################################################
# Function to create the deb package for the next project in the
# list
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_next_deb {
    local exit_status=0
    for pkg in "${TIZ_PKGS_ORDERED[@]}"; do
        dpkg -l | grep "$pkg" > /dev/null
        result=${PIPESTATUS[1]}
        if [[ $result -ne 0 ]]; then

            local pkg_dir="$TIZONIA_DIR/${TIZ_PKG_DIRS[$pkg]}"
            do_tar_file "$pkg" "$pkg_dir"
            exit_status=$?
            if [[ "$exit_status" -ne 0 ]] ; then
                break
            fi

            local pkg_deb_dir="$DEBIAN_DIR/$pkg"
            exists_in_array "$pkg" "${TIZ_PYTHON_PKGS[@]}"
            if [[ $? -eq 0 ]]; then
                do_python_deb_file "$pkg" "$pkg_deb_dir"
                exit_status=$?
            else
                do_deb_file "$pkg" "$pkg_deb_dir"
                exit_status=$?
            fi

            if [[ "$exit_status" -ne 0 ]] ; then
                break
            fi

            do_install_deb_file "$pkg" "$pkg_deb_dir"
            exit_status=$?
            if [[ "$exit_status" -ne 0 ]] ; then
                break
            fi

        else
            pretty_print "$GRN" "[$pkg] : installed."
        fi
    done
    return "$exit_status"
}

##################################################################
# Function to uninstall (purge) all previously installed debian
# packages
#
# Globals
#   DEBIAN_DIR
#   TIZ_PKG_DIST_CMD
# Arguments:
#   None
# Returns:
#   None
##################################################################
function do_remove_debs {
    local exit_status=0
    for ((i=${#TIZ_PKGS_ORDERED[@]}-1; i>=0; i--)); do
        local pkg="${TIZ_PKGS_ORDERED[$i]}"
        local pkg_dir="$DEBIAN_DIR/$pkg"
        if [[ -d "$pkg_dir" ]]; then
            cd "$pkg_dir"
            local deb_files=(*.deb)
            for ((j=${#deb_files[@]}-1; j>=0; j--)); do
                deb="${deb_files[$j]}"
                pretty_print "$BLU" "[$pkg] : uninstalling $deb."
                sudo dpkg --purge $(echo "$deb" | cut -d'_' -f1)
            done
        fi
    done
    return "$exit_status"
}

##################################################################
# Main function
#
# Globals
#   TIZONIA_DIR
#   DEBIAN_DIR
# Arguments:
#   None
# Returns:
#   None
##################################################################
function main {
    local exit_status=0
    local makeall=0
    local makenext=0
    local prereqs=0
    local removeall=0

    local progname=$(basename $0)
    CMDLINE=$(getopt -o "anpr" --long "makeall,makenext,prereqs,removeall" -n "$progname" -- "$@")
    eval set -- "$CMDLINE"
    while true; do
        case "$1" in
            -a|--makeall)
                echo "makeall"
                makeall=1; shift
                ;;
            -n|--makenext)
                echo "makenext"
                makenext=1; shift
                ;;
            -p|--prereqs)
                echo "prereqs"
                prereqs=1; shift
                ;;
            -r|--removeall)
                echo "removeall"
                removeall=1; shift
                ;;
            --)
                shift
                break
                ;;
        esac
    done

    local total=$(( $makeall + $makenext + $prereqs + $removeall ))
    if [[ "$total" != 1 ]]; then
        usage
        exit "$E_BADARGS"
    fi

    # Export important variables
    export DEBFULLNAME=$MYDEBFULLNAME
    export DEBEMAIL=$MYDEBEMAIL

    if [[ "$prereqs" == 1 ]]; then
        do_prereqs
        exit_status=0
    fi

    if [[ "$exit_status" -eq 0 ]] ; then
        if [[ "$makeall" == 1 ]]; then
            do_all_tars_and_debs
            exit_status=$?
        fi
    fi

    if [[ "$exit_status" -eq 0 ]] ; then
        if [[ "$makenext" == 1 ]]; then
            do_next_deb
            exit_status=$?
        fi
    fi

    if [[ "$exit_status" -eq 0 ]] ; then
        if [[ "$removeall" == 1 ]]; then
            do_remove_debs
            exit_status=$?
        fi
    fi

    cd "$CWD"
    exit "$exit_status"
}

main "$@"
